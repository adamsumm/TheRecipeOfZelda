# Grammar file for testing.

configuration {
	min_vertices = 10;
}

productions {
    e1 -BK> b2;
 
    # Productions

    
    Seed1 ==> s1 -> Middle2 -> Middle3  -k> b4 -l> t5,
                    Middle2 -> Middle6 -> HasKey7;
    Seed1 ==> s1 -> Middle2 -> Middle3  -k> b4 -l> t5,
    	                       Middle3 -> Middle6 -> HasKey7;
    Seed1 ==> s1 -> Middle2 -> Middle3 -> Middle4 -k> b5 -l> t6,
                    Middle2 -> Middle4 -> Keyitem7 Middle8 -> HasKey9,
		    Middle8 -> Middle3;
    Middle1 ==> Keyitem1;
    Keyitem1 ==> keyitem1;
    Keyitem1 ==> ekeyitem1;
    Middle1 ==> Middle1 -> Branch2;
    Branch1 ==> HasChallenge1 -> empty2;
    Branch1 ==> HasChallenge1 -> HasItem2;
    Branch1 ==> HasItem1 -> empty2;
    Branch1 ==> HasItem1 -> HasChallenge2;
    Branch1 ==> empty1 -> empty2;
    Branch1 ==> empty1 -> HasChallenge2;
    Middle1 -> Middle2 ==> Middle1 -k> Middle2,
    	       	       	   Middle1 -> HasKey3;
    Middle1 -> Middle2 ==> Middle1 -> Middle2 -k> Middle3,
    	       	       	   Middle1 -> Middle4 -> HasKey5 -> Middle2;
    Middle1 -> Middle2 ==> Middle1 -> Middle2 -k> Middle3,
    	       	       	   Middle1 -> Middle4 -> HasKey5 -> Middle2,
			   Middle4 -b> Middle3;
    Middle1 -> HasKey2 ==> Middle1 -> HasChallenge3 -> HasKey2;
    Middle1 ==> empty1;
    Middle1 ==> HasChallenge1;
    Middle1 ==> i1;
    HasChallenge1 ==> e1;
    HasChallenge1 ==> p1;
    HasChallenge1 ==> ep1;
    HasChallenge1 ==> epi1;
    HasChallenge1 ==> ei1;
    HasChallenge1 ==> pi1;
    HasItem1 ==> i1;
    HasItem1 ==> pi1;
    HasKey1 ==> pk1;
    HasKey1 ==> ek1;
    HasKey1 ==> epk1;
    HasKey1 ==> epki1;
    HasKey1 ==> pki1;
    HasKey1 ==> epi1;
    HasKey1 ==> eki1;
    
}
